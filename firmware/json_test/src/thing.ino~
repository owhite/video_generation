#define compSerial Serial
#define BTSerial  Serial2 // actually just data from ESP32
#define MP2Serial Serial3

// const int chipSelect = BUILTIN_SDCARD;

#define BLINK         'b'
#define VARIABLES     'v'
#define GATHER        'g'
#define END           'e' // stops the gather
#define SEND_STRING   't'
#define RECORD        'r'

// serial stuff
const byte maxCommandLength = 50;
char receivedChars[maxCommandLength]; 
char commandString[maxCommandLength]; 
boolean newData = false;

// blinking stuff
boolean blinkOn = false;
boolean blinkFlag = false;
uint32_t blinkDelta = 0;
uint32_t blinkInterval = 100; 
uint32_t blinkNow;

#define EXT_BLINK_PIN 2

void setup() {
  compSerial.begin(115200);
  BTSerial.begin(115200);
  MP2Serial.begin(115200);

  pinMode(EXT_BLINK_PIN, OUTPUT); 
}

void loop() {
  blinkNow = millis();
  if (blinkFlag) {
    if ((blinkNow - blinkDelta) > blinkInterval) {
      digitalWrite(EXT_BLINK_PIN, blinkOn);
      blinkOn = !blinkOn;
      blinkDelta = blinkNow;
    }
  }
  else {
    digitalWrite(EXT_BLINK_PIN, LOW);
  }

  recvCommand(compSerial);
  recvCommand(BTSerial);
  processCommand();

  while (MP2Serial.available()) {
    char c1 = MP2Serial.read();
    compSerial.write(c1);
  }

  //  while (BTSerial.available()) {
  // char c1 = BTSerial.read();
  // compSerial.write(c1);
  // }
}

void recvCommand(Stream &ser) {
  static byte ndx = 0;
  char endMarker = '\n';
  char rc;
 
  while (ser.available() > 0 && newData == false) {
    rc = ser.read();
    if (rc != endMarker) {
      receivedChars[ndx] = rc;
      ndx++;
      if (ndx >= maxCommandLength) {
	ndx = maxCommandLength - 1;
      }
    }
    else {
      receivedChars[ndx] = '\0'; // terminate the string
      ndx = 0;
      newData = true;
    }
  }
}

void processCommand() {
  if (newData != true) { return;  }

  compSerial.print("STRING :: ");
  compSerial.println(receivedChars);

  commandString[0] = '\0';
  char cmd = receivedChars[0];
  strncpy(commandString, receivedChars + 2, strlen(receivedChars)-2);

  if (receivedChars[1] != ' ' && strlen(receivedChars) > 2) {
    compSerial.println("commands must start with single letter");
  }
  else {
    compSerial.print("CMD :: ");
    compSerial.println(cmd);

    compSerial.print("STR :: ");
    compSerial.println(commandString);
  }
  
  int p = strlen(commandString);
  commandString[p] = '\r';
  commandString[p+1] = '\n';
  commandString[p+2] = '\0';

  switch (cmd) {
  case BLINK:
    compSerial.println("BLINK!");
    blinkFlag = !blinkFlag;
    break;
  case VARIABLES:
    compSerial.write("get\r\n");
    MP2Serial.write("get\r\n");
    break;
  case GATHER:
    compSerial.write("status json\r\n");
    MP2Serial.write("status json\r\n");
    break;
  case END:
    compSerial.write("status stop\r\n");
    MP2Serial.write("status stop\r\n");
    break;
  default:
    break;
  }


  newData = false;
}
